{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-b39f847558ed94d4f080f4ef88bfae4c44d83134",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/Guardian.sol": "project/contracts/Guardian.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/Guardian.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\n/// @notice Interface to receive cross-chain messages from Avalanche Teleporter\ninterface ITeleporterMessenger {\n    function receiveTeleporterMessage(\n        bytes32 messageID,\n        address sourceAddress,\n        bytes calldata messageBody\n    ) external;\n}\n\n/**\n * @title Guardian Contract\n * @notice Stores addresses reported as malicious via cross-chain verified messages.\n * Only messages from the authorized FunctionsConsumer via the Teleporter are allowed.\n */\ncontract Guardian {\n    // --- Errors ---\n    error UnauthorizedCaller();\n    error UnauthorizedSource();\n    error InvalidETHTransfer();\n\n    // --- Immutable Configuration ---\n\n    address public immutable teleporter;\n    uint256 public immutable sourceBlockchainID;\n    address public immutable authorizedSenderAddress;\n\n    // --- Storage ---\n\n    mapping(address => bool) private _isMalicious;\n\n    // --- Events ---\n\n    event MaliciousAddressRecorded(address indexed user);\n\n    // --- Constructor ---\n\n    constructor(\n        address _teleporter,\n        uint256 _sourceBlockchainID,\n        address _authorizedSenderAddress\n    ) {\n        if (_teleporter == address(0)) revert UnauthorizedCaller();\n        if (_authorizedSenderAddress == address(0)) revert UnauthorizedSource();\n\n        teleporter = _teleporter;\n        sourceBlockchainID = _sourceBlockchainID;\n        authorizedSenderAddress = _authorizedSenderAddress;\n    }\n\n    // --- Cross-Chain Message Entry Point ---\n\n    function receiveTeleporterMessage(\n        bytes32 /* messageID */,\n        address sourceAddress,\n        bytes calldata messageBody\n    ) external {\n        if (msg.sender != teleporter) revert UnauthorizedCaller();\n        if (sourceAddress != authorizedSenderAddress) revert UnauthorizedSource();\n\n        address maliciousUser = abi.decode(messageBody, (address));\n\n        if (!_isMalicious[maliciousUser]) {\n            _isMalicious[maliciousUser] = true;\n            emit MaliciousAddressRecorded(maliciousUser);\n        }\n    }\n\n    // --- View Function ---\n\n    function isMalicious(address user) external view returns (bool) {\n        return _isMalicious[user];\n    }\n\n    // --- Fallback Protection ---\n\n    receive() external payable {\n        revert InvalidETHTransfer();\n    }\n\n    fallback() external payable {\n        revert InvalidETHTransfer();\n    }\n}\n"
      }
    }
  }
}